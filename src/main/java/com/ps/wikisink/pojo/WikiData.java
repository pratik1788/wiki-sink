/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ps.wikisink.pojo;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class WikiData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8863739102656326612L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WikiData\",\"namespace\":\"com.ps.wikisink.pojo\",\"fields\":[{\"name\":\"yearMonthDay\",\"type\":\"int\"},{\"name\":\"hourOfDay\",\"type\":\"int\"},{\"name\":\"language\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"pageName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"nonUniqueViews\",\"type\":\"int\"},{\"name\":\"bytesTransferred\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WikiData> ENCODER =
      new BinaryMessageEncoder<WikiData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WikiData> DECODER =
      new BinaryMessageDecoder<WikiData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<WikiData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<WikiData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<WikiData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<WikiData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this WikiData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a WikiData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a WikiData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static WikiData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int yearMonthDay;
   private int hourOfDay;
   private java.lang.String language;
   private java.lang.String pageName;
   private int nonUniqueViews;
   private long bytesTransferred;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WikiData() {}

  /**
   * All-args constructor.
   * @param yearMonthDay The new value for yearMonthDay
   * @param hourOfDay The new value for hourOfDay
   * @param language The new value for language
   * @param pageName The new value for pageName
   * @param nonUniqueViews The new value for nonUniqueViews
   * @param bytesTransferred The new value for bytesTransferred
   */
  public WikiData(java.lang.Integer yearMonthDay, java.lang.Integer hourOfDay, java.lang.String language, java.lang.String pageName, java.lang.Integer nonUniqueViews, java.lang.Long bytesTransferred) {
    this.yearMonthDay = yearMonthDay;
    this.hourOfDay = hourOfDay;
    this.language = language;
    this.pageName = pageName;
    this.nonUniqueViews = nonUniqueViews;
    this.bytesTransferred = bytesTransferred;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return yearMonthDay;
    case 1: return hourOfDay;
    case 2: return language;
    case 3: return pageName;
    case 4: return nonUniqueViews;
    case 5: return bytesTransferred;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: yearMonthDay = (java.lang.Integer)value$; break;
    case 1: hourOfDay = (java.lang.Integer)value$; break;
    case 2: language = value$ != null ? value$.toString() : null; break;
    case 3: pageName = value$ != null ? value$.toString() : null; break;
    case 4: nonUniqueViews = (java.lang.Integer)value$; break;
    case 5: bytesTransferred = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'yearMonthDay' field.
   * @return The value of the 'yearMonthDay' field.
   */
  public int getYearMonthDay() {
    return yearMonthDay;
  }


  /**
   * Sets the value of the 'yearMonthDay' field.
   * @param value the value to set.
   */
  public void setYearMonthDay(int value) {
    this.yearMonthDay = value;
  }

  /**
   * Gets the value of the 'hourOfDay' field.
   * @return The value of the 'hourOfDay' field.
   */
  public int getHourOfDay() {
    return hourOfDay;
  }


  /**
   * Sets the value of the 'hourOfDay' field.
   * @param value the value to set.
   */
  public void setHourOfDay(int value) {
    this.hourOfDay = value;
  }

  /**
   * Gets the value of the 'language' field.
   * @return The value of the 'language' field.
   */
  public java.lang.String getLanguage() {
    return language;
  }


  /**
   * Sets the value of the 'language' field.
   * @param value the value to set.
   */
  public void setLanguage(java.lang.String value) {
    this.language = value;
  }

  /**
   * Gets the value of the 'pageName' field.
   * @return The value of the 'pageName' field.
   */
  public java.lang.String getPageName() {
    return pageName;
  }


  /**
   * Sets the value of the 'pageName' field.
   * @param value the value to set.
   */
  public void setPageName(java.lang.String value) {
    this.pageName = value;
  }

  /**
   * Gets the value of the 'nonUniqueViews' field.
   * @return The value of the 'nonUniqueViews' field.
   */
  public int getNonUniqueViews() {
    return nonUniqueViews;
  }


  /**
   * Sets the value of the 'nonUniqueViews' field.
   * @param value the value to set.
   */
  public void setNonUniqueViews(int value) {
    this.nonUniqueViews = value;
  }

  /**
   * Gets the value of the 'bytesTransferred' field.
   * @return The value of the 'bytesTransferred' field.
   */
  public long getBytesTransferred() {
    return bytesTransferred;
  }


  /**
   * Sets the value of the 'bytesTransferred' field.
   * @param value the value to set.
   */
  public void setBytesTransferred(long value) {
    this.bytesTransferred = value;
  }

  /**
   * Creates a new WikiData RecordBuilder.
   * @return A new WikiData RecordBuilder
   */
  public static com.ps.wikisink.pojo.WikiData.Builder newBuilder() {
    return new com.ps.wikisink.pojo.WikiData.Builder();
  }

  /**
   * Creates a new WikiData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WikiData RecordBuilder
   */
  public static com.ps.wikisink.pojo.WikiData.Builder newBuilder(com.ps.wikisink.pojo.WikiData.Builder other) {
    if (other == null) {
      return new com.ps.wikisink.pojo.WikiData.Builder();
    } else {
      return new com.ps.wikisink.pojo.WikiData.Builder(other);
    }
  }

  /**
   * Creates a new WikiData RecordBuilder by copying an existing WikiData instance.
   * @param other The existing instance to copy.
   * @return A new WikiData RecordBuilder
   */
  public static com.ps.wikisink.pojo.WikiData.Builder newBuilder(com.ps.wikisink.pojo.WikiData other) {
    if (other == null) {
      return new com.ps.wikisink.pojo.WikiData.Builder();
    } else {
      return new com.ps.wikisink.pojo.WikiData.Builder(other);
    }
  }

  /**
   * RecordBuilder for WikiData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WikiData>
    implements org.apache.avro.data.RecordBuilder<WikiData> {

    private int yearMonthDay;
    private int hourOfDay;
    private java.lang.String language;
    private java.lang.String pageName;
    private int nonUniqueViews;
    private long bytesTransferred;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ps.wikisink.pojo.WikiData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.yearMonthDay)) {
        this.yearMonthDay = data().deepCopy(fields()[0].schema(), other.yearMonthDay);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.hourOfDay)) {
        this.hourOfDay = data().deepCopy(fields()[1].schema(), other.hourOfDay);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.language)) {
        this.language = data().deepCopy(fields()[2].schema(), other.language);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.pageName)) {
        this.pageName = data().deepCopy(fields()[3].schema(), other.pageName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.nonUniqueViews)) {
        this.nonUniqueViews = data().deepCopy(fields()[4].schema(), other.nonUniqueViews);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.bytesTransferred)) {
        this.bytesTransferred = data().deepCopy(fields()[5].schema(), other.bytesTransferred);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing WikiData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ps.wikisink.pojo.WikiData other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.yearMonthDay)) {
        this.yearMonthDay = data().deepCopy(fields()[0].schema(), other.yearMonthDay);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.hourOfDay)) {
        this.hourOfDay = data().deepCopy(fields()[1].schema(), other.hourOfDay);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.language)) {
        this.language = data().deepCopy(fields()[2].schema(), other.language);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pageName)) {
        this.pageName = data().deepCopy(fields()[3].schema(), other.pageName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.nonUniqueViews)) {
        this.nonUniqueViews = data().deepCopy(fields()[4].schema(), other.nonUniqueViews);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.bytesTransferred)) {
        this.bytesTransferred = data().deepCopy(fields()[5].schema(), other.bytesTransferred);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'yearMonthDay' field.
      * @return The value.
      */
    public int getYearMonthDay() {
      return yearMonthDay;
    }


    /**
      * Sets the value of the 'yearMonthDay' field.
      * @param value The value of 'yearMonthDay'.
      * @return This builder.
      */
    public com.ps.wikisink.pojo.WikiData.Builder setYearMonthDay(int value) {
      validate(fields()[0], value);
      this.yearMonthDay = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'yearMonthDay' field has been set.
      * @return True if the 'yearMonthDay' field has been set, false otherwise.
      */
    public boolean hasYearMonthDay() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'yearMonthDay' field.
      * @return This builder.
      */
    public com.ps.wikisink.pojo.WikiData.Builder clearYearMonthDay() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'hourOfDay' field.
      * @return The value.
      */
    public int getHourOfDay() {
      return hourOfDay;
    }


    /**
      * Sets the value of the 'hourOfDay' field.
      * @param value The value of 'hourOfDay'.
      * @return This builder.
      */
    public com.ps.wikisink.pojo.WikiData.Builder setHourOfDay(int value) {
      validate(fields()[1], value);
      this.hourOfDay = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'hourOfDay' field has been set.
      * @return True if the 'hourOfDay' field has been set, false otherwise.
      */
    public boolean hasHourOfDay() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'hourOfDay' field.
      * @return This builder.
      */
    public com.ps.wikisink.pojo.WikiData.Builder clearHourOfDay() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'language' field.
      * @return The value.
      */
    public java.lang.String getLanguage() {
      return language;
    }


    /**
      * Sets the value of the 'language' field.
      * @param value The value of 'language'.
      * @return This builder.
      */
    public com.ps.wikisink.pojo.WikiData.Builder setLanguage(java.lang.String value) {
      validate(fields()[2], value);
      this.language = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'language' field has been set.
      * @return True if the 'language' field has been set, false otherwise.
      */
    public boolean hasLanguage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'language' field.
      * @return This builder.
      */
    public com.ps.wikisink.pojo.WikiData.Builder clearLanguage() {
      language = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'pageName' field.
      * @return The value.
      */
    public java.lang.String getPageName() {
      return pageName;
    }


    /**
      * Sets the value of the 'pageName' field.
      * @param value The value of 'pageName'.
      * @return This builder.
      */
    public com.ps.wikisink.pojo.WikiData.Builder setPageName(java.lang.String value) {
      validate(fields()[3], value);
      this.pageName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'pageName' field has been set.
      * @return True if the 'pageName' field has been set, false otherwise.
      */
    public boolean hasPageName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'pageName' field.
      * @return This builder.
      */
    public com.ps.wikisink.pojo.WikiData.Builder clearPageName() {
      pageName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'nonUniqueViews' field.
      * @return The value.
      */
    public int getNonUniqueViews() {
      return nonUniqueViews;
    }


    /**
      * Sets the value of the 'nonUniqueViews' field.
      * @param value The value of 'nonUniqueViews'.
      * @return This builder.
      */
    public com.ps.wikisink.pojo.WikiData.Builder setNonUniqueViews(int value) {
      validate(fields()[4], value);
      this.nonUniqueViews = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'nonUniqueViews' field has been set.
      * @return True if the 'nonUniqueViews' field has been set, false otherwise.
      */
    public boolean hasNonUniqueViews() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'nonUniqueViews' field.
      * @return This builder.
      */
    public com.ps.wikisink.pojo.WikiData.Builder clearNonUniqueViews() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesTransferred' field.
      * @return The value.
      */
    public long getBytesTransferred() {
      return bytesTransferred;
    }


    /**
      * Sets the value of the 'bytesTransferred' field.
      * @param value The value of 'bytesTransferred'.
      * @return This builder.
      */
    public com.ps.wikisink.pojo.WikiData.Builder setBytesTransferred(long value) {
      validate(fields()[5], value);
      this.bytesTransferred = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesTransferred' field has been set.
      * @return True if the 'bytesTransferred' field has been set, false otherwise.
      */
    public boolean hasBytesTransferred() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'bytesTransferred' field.
      * @return This builder.
      */
    public com.ps.wikisink.pojo.WikiData.Builder clearBytesTransferred() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WikiData build() {
      try {
        WikiData record = new WikiData();
        record.yearMonthDay = fieldSetFlags()[0] ? this.yearMonthDay : (java.lang.Integer) defaultValue(fields()[0]);
        record.hourOfDay = fieldSetFlags()[1] ? this.hourOfDay : (java.lang.Integer) defaultValue(fields()[1]);
        record.language = fieldSetFlags()[2] ? this.language : (java.lang.String) defaultValue(fields()[2]);
        record.pageName = fieldSetFlags()[3] ? this.pageName : (java.lang.String) defaultValue(fields()[3]);
        record.nonUniqueViews = fieldSetFlags()[4] ? this.nonUniqueViews : (java.lang.Integer) defaultValue(fields()[4]);
        record.bytesTransferred = fieldSetFlags()[5] ? this.bytesTransferred : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WikiData>
    WRITER$ = (org.apache.avro.io.DatumWriter<WikiData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WikiData>
    READER$ = (org.apache.avro.io.DatumReader<WikiData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.yearMonthDay);

    out.writeInt(this.hourOfDay);

    out.writeString(this.language);

    out.writeString(this.pageName);

    out.writeInt(this.nonUniqueViews);

    out.writeLong(this.bytesTransferred);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.yearMonthDay = in.readInt();

      this.hourOfDay = in.readInt();

      this.language = in.readString();

      this.pageName = in.readString();

      this.nonUniqueViews = in.readInt();

      this.bytesTransferred = in.readLong();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.yearMonthDay = in.readInt();
          break;

        case 1:
          this.hourOfDay = in.readInt();
          break;

        case 2:
          this.language = in.readString();
          break;

        case 3:
          this.pageName = in.readString();
          break;

        case 4:
          this.nonUniqueViews = in.readInt();
          break;

        case 5:
          this.bytesTransferred = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










